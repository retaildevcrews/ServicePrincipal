name: Docker CI

on:
  push:
    branches:
      - main

    paths-ignore:
      - 'docs/**'
      - '**.md'
      - 'spikes/**' # Don't build the spikes unless explicitly specified

    tags:
      - v*
  
  pull_request:
    types: [ opened, reopened, synchronize ]
    branches:
      - main

    paths-ignore:
    - 'docs/**'
    - '**.md'
    - 'spikes/**' # Don't build the spikes unless explicitly specified

jobs:

  build:

    runs-on: ubuntu-latest

    env:
      ACR_REG_REPO_URL : serviceprincipalacrdev.azurecr.io/serviceprincipal
      # These are used in if: conditions
      ACR_LOGGED_IN    : false
      DKR_IMG_IS_BUILT : false
      TEMP_IMG_NAME    : sp_image
      RUN_ID           : ${{ github.run_id }}
      QUALITY_TAG      : beta

    steps:
    - uses: actions/checkout@v2

    - name: Login to Azure registry
      # do not copy the actual secrets
      # do not echo secrets
      # You must add the following secrets to github repo
      #    SERVICE_PRINCIPAL_ID     - ServicePrincipal Application ID
      #    SERVICE_PRINCIPAL_SECRET - Access Secret for the ServicePrincipal
      run: |
        # Login to Azure registry
        echo "${{ secrets.SERVICE_PRINCIPAL_SECRET }}" | docker login "${ACR_REG_REPO_URL}" -u ${{ secrets.SERVICE_PRINCIPAL_ID }} --password-stdin
        # If docker login is successful, set env variable
        [[ $? == 0 ]] && echo "::set-env name=ACR_LOGGED_IN::true"

    - name: Build Container
      if: ${{ env.ACR_LOGGED_IN == 'true' }}
      run: |
        # Update Quality Tag If This Is A Push To main
        if [[ "${{ github.event_name }}" == "push" ]]; then
          export QUALITY_TAG=release
        fi
        export GIT_HASH=$( echo ${{ github.sha }} | cut -c1-7 )
        # Build Image
        docker build --pull -t ${TEMP_IMG_NAME} \
                    --build-arg VERSION_RUN_ID=${RUN_ID} \
                    --build-arg VERSION_GIT_HASH=${GIT_HASH} \
                    --build-arg VERSION_QUALITY_TAG=${QUALITY_TAG} \
                    -f src/Automation/CSE.Automation/Dockerfile src/Automation
        # Set variable is successful
        [[ $? == 0 ]] && echo "::set-env name=DKR_IMG_IS_BUILT::true"

    - name: Docker Push
      if: ${{ github.event.pull_request.merged != 'true'}}
      run: |
        # Extract Major and Minor Versions
        export MAJOR_MINOR=$(cat src/Automation/CSE.Automation/CSE.Automation.csproj | grep VersionMajorMinor | sed 's/\s*<VersionMajorMinor>\(.*\)<\/VersionMajorMinor>.*/\1/')
        export GIT_HASH=$( echo ${{ github.sha }} | cut -c1-7 )
        #only run this step if pull request or push to main not on merge
        if [[ "${{ github.event_name }}" == "push" ]]; then
          export QUALITY_TAG=release
          docker tag ${TEMP_IMG_NAME} ${ACR_REG_REPO_URL}:latest
        fi
        docker tag ${TEMP_IMG_NAME} ${ACR_REG_REPO_URL}:${ MAJOR_MINOR }.${ RUN_ID }-${ GIT_HASH }-${ QUALITY_TAG }
        
        # Push images after merge
        docker push ${ACR_REG_REPO_URL}
