name: Docker CI

on:
  push:
    branches:
      - alfredo/cicd-fixes-for-handoff

    paths-ignore:
      - 'docs/**'
      - '**.md'
      - 'spikes/**' # Don't build the spikes unless explicitly specified

    tags:
      - v*
  
  pull_request:
    types: [ opened, reopened, synchronize ]
    branches:
      - main

    paths-ignore:
    - 'docs/**'
    - '**.md'
    - 'spikes/**' # Don't build the spikes unless explicitly specified

jobs:

  build:

    runs-on: ubuntu-latest

    env:
      ACR_REG_REPO_URL : svcprincipalcsedev.azurecr.io/serviceprincipal
      STORAGE_NAME: serviceprincipalstdev

    steps:
    - name: Azure Login
      run: |
        # login to Azure
        az login --service-principal -u ${{ secrets.SERVICE_PRINCIPAL_ID }} --tenant ${{ secrets.TENANT_ID }} -p ${{ secrets.SERVICE_PRINCIPAL_SECRET }}    

    - name: Checkout Code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # needed to calulate patch

    - name: Run Unit Tests
      run: |
        cd src/Automation
        dotnet test --collect:"XPlat Code Coverage" --logger "console;verbosity=detailed" --filter "Category=Unit"

    - name: Create Testing Resources
      run: |
        export GIT_HASH=$( echo ${{ github.sha }} | cut -c1-7 )
        echo "GIT_HASH=${GIT_HASH}" >> $GITHUB_ENV
        export QUEUE_PREFIX="sit-$(date '+%Y%m%d')-${GIT_HASH}"
        echo "QUEUE_PREFIX=${QUEUE_PREFIX}" >> $GITHUB_ENV
        az storage queue create --fail-on-exist --account-name ${STORAGE_NAME} --name "${QUEUE_PREFIX}-discover"
        az storage queue create --fail-on-exist --account-name ${STORAGE_NAME} --name "${QUEUE_PREFIX}-evaluate"
        az storage queue create --fail-on-exist --account-name ${STORAGE_NAME} --name "${QUEUE_PREFIX}-update"

    - name: Run Integration Tests
      run: |
        cd src/Automation
        export SPDiscoverQueue="${QUEUE_PREFIX}-discover"
        export SPEvaluateQueue="${QUEUE_PREFIX}-evaluate"
        export SPUpdateQueue="${QUEUE_PREFIX}-update"
        dotnet test --collect:"XPlat Code Coverage" --logger "console;verbosity=detailed" --filter "Category=Integration"

    - name: Cleanup Testing Resources
      if: ${{ always() }}
      run: |
        export temp_queues=$(az storage queue list --account-name ${STORAGE_NAME} --prefix ${QUEUE_PREFIX} -o tsv --query '[].name')
        for queue in $temp_queues; do
          az storage queue delete --account-name ${STORAGE_NAME} --name $queue
        done

    - name: Calculate Version
      run: |
        export version_from_config=$(git blame src/Automation/CSE.Automation/CSE.Automation.csproj | grep "</VersionPrefix>")
        export currenthash=$(git rev-parse HEAD)
        export lasthash=$(echo ${version_from_config} | awk '{print $1}')
        export patch=$(git log ${lasthash}..${currenthash} --pretty=oneline | wc -l | sed "s/\s//g")
        export majorminor=$(echo $version_from_config | grep -oP '\d+(\.\d+)+')
        export VERSION_PREFIX=${majorminor}.${patch}
        echo $VERSION_PREFIX
        echo "VERSION_PREFIX=${VERSION_PREFIX}" >> $GITHUB_ENV
        exit 1

    - name: Build Container
    # Version Prefix must be of following format: ^\d+(\.\d+){1,3}$
    # Version Suffix must be of following format: ^[0-9A-Za-z-]*$
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]
        then
          VERSION_SUFFIX="${GIT_HASH}"
        else
          PR_NUMBER=$(echo "${{ github.ref }}" | awk 'BEGIN { FS = "/" } ; { print $3 }')
          VERSION_SUFFIX="PR${PR_NUMBER}-${GIT_HASH}"
        fi
        # Build Image
        docker build --pull -t temp \
                    --build-arg VERSION_PREFIX="${VERSION_PREFIX}" \
                    --build-arg VERSION_SUFFIX="${VERSION_SUFFIX}" \
                    -f src/Automation/CSE.Automation/Dockerfile src/Automation
    
    - name: Registry Login
    # do not copy the actual secrets
    # do not echo secrets
    # You must add the following secrets to github repo
    #    SERVICE_PRINCIPAL_ID     - ServicePrincipal Application ID
    #    SERVICE_PRINCIPAL_SECRET - Access Secret for the ServicePrincipal
      run: |
        # Login to Azure registry
        echo "${{ secrets.SERVICE_PRINCIPAL_SECRET }}" | docker login "${ACR_REG_REPO_URL}" -u ${{ secrets.SERVICE_PRINCIPAL_ID }} --password-stdin

    - name: Publish Container
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]
        then
          VERSION_SUFFIX="${GIT_HASH}"
          docker tag temp ${ACR_REG_REPO_URL}:latest
        else
          PR_NUMBER=$(echo "${{ github.ref }}" | awk 'BEGIN { FS = "/" } ; { print $3 }')
          VERSION_SUFFIX="PR${PR_NUMBER}-${GIT_HASH}"
        fi
        
        SEMANTIC_VERSION="${VERSION_PREFIX}-${VERSION_SUFFIX}"

        IMAGE_NAME="${ACR_REG_REPO_URL}:${SEMANTIC_VERSION}"
        echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

        docker tag temp "${IMAGE_NAME}"
        docker push ${ACR_REG_REPO_URL}

    - name: Deploy Application Settings 
      run: |        
        if [[ "${{ github.event_name }}" == "push" ]]
        then        
          .github/workflows/appConfigSettings.sh prod
        elif [[ "${{ github.event_name }}" == "pull_request" ]]
        then          
          
          echo "Setting STAGING docker image to ${IMAGE_NAME}"

          az functionapp config container set -g rg-svcprincipal-cse-dev-app -n fa-svcprincipal-cse-dev --slot staging --docker-custom-image-name $IMAGE_NAME
          az functionapp config appsettings set -g rg-svcprincipal-cse-dev-app -n fa-svcprincipal-cse-dev --slot staging --settings "DOCKER_CUSTOM_IMAGE_NAME=${IMAGE_NAME}"  

          .github/workflows/appConfigSettings.sh qa
        fi

    - name: Tag Release
      if: github.event_name == 'push'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION_PREFIX }}
        release_name: ${{ env.VERSION_PREFIX }}
